generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  password         String
  projects         Project[]
  bids             Bid[]
  sentMessages     Message[]
  reviewsGiven     Review[]       @relation("ReviewerReviews")
  reviewsReceived  Review[]       @relation("RevieweeReviews")
  notifications    Notification[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Project {
  id            String         @id @default(cuid())
  title         String
  description   String
  budget        Float?
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  bids          Bid[]
  messages      Message[]
  reviews       Review[]
  status        ProjectStatus  @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  proposal  String
  status    BidStatus @default(PENDING)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  content    String
  rating     Int
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  reviewerId String
  reviewer   User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  revieweeId String
  reviewee   User     @relation("RevieweeReviews", fields: [revieweeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}